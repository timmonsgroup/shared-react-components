// The storage modes
// This is how we will store the id, access, and refresh tokens
const STORAGE_MODES = {
  SESSION: 'session',
  LOCAL: 'local',
  COOKIE: 'cookie',
  NONE: 'none',
};

// The authorization mode
// This is what we use to determine if the user has access to a resource
// If the user has the permission in their acl, they have access
const AUTHORIZATION_MODES = {
  ACCESS_CONTROL_LIST: 'acl',
}

// The source of the access control list
// Can be an api endpoint, a cookie, or the id token
// When using the id token, the acl claim will be used from the id token (NOT THE ACCESS TOKEN)
// When using the api endpoint, the acl claim will be used from the response of the api endpoint (MUST BE AN ARRAY OF STRINGS)
const ACCESS_CONTROL_LIST_SOURCE = {
  API: 'api', // An api endpoint that returns a list of permissions
  ID_TOKEN: 'id_token', // The id token contains a list of permissions in the 'acl' claim
}

// This is an example configuration
const exampleConfiguration = {
  authentication: {
    oAuth: {
      clientId: 'my-client-id',
      redirectUri: 'https://my-app.com/oauth/callback',
      scopes: ['openid', 'profile', 'email', 'offline_access'],
      host: 'my-auth-server.com',
      endpoints: {
        refresh: '/api/oauth/refresh',
        logout: '/api/oauth/logout',
      },
    },
  },
  storage: {
    mode: STORAGE_MODES.SESSION,
  },
  authorization: {
    mode: AUTHORIZATION_MODES.ACCESS_CONTROL_LIST,
    source: ACCESS_CONTROL_LIST_SOURCE.API,
    endpoints: {
      acl: '/api/user/permissions',
    },
  }
}

/**
 * This function validates the oAuth configuration, throwing an error if it is invalid
 * @param configuration  The configuration to validate
 * @throws Error
 */
export const validateOAuthConfiguration = (configuration) => {
  // The oAuth configuration must be an object
  if (typeof configuration.authentication.oAuth !== 'object') {
    throw new Error('The oAuth configuration must be an object');
  }

  // The clientId must be a string
  if (typeof configuration.authentication.oAuth.clientId !== 'string') {
    throw new Error('The oAuth clientId must be a string');
  }

  // The redirectUri must be a string
  if (typeof configuration.authentication.oAuth.redirectUri !== 'string') {
    throw new Error('The oAuth redirectUri must be a string');
  }

  // The scopes must be an array
  if (!Array.isArray(configuration.authentication.oAuth.scopes)) {
    throw new Error('The oAuth scopes must be an array');
  }

  // The host must be a string
  if (typeof configuration.authentication.oAuth.host !== 'string') {
    throw new Error('The oAuth host must be a string');
  }

  // The endpoints must be an object
  if (typeof configuration.authentication.oAuth.endpoints !== 'object') {
    throw new Error('The oAuth endpoints must be an object');
  }

  // The refresh endpoint must be a string
  if (typeof configuration.authentication.oAuth.endpoints.refresh !== 'string') {
    throw new Error('The oAuth refresh endpoint must be a string');
  }

  // The logout endpoint must be a string
  if (typeof configuration.authentication.oAuth.endpoints.logout !== 'string') {
    throw new Error('The oAuth logout endpoint must be a string');
  }
}

/**
 * This function validates the storage configuration, throwing an error if it is invalid
 * @param storage  The storage configuration to validate
 * @throws Error
 */
export const validateConfigurationStorage = (storage) => {
  
  // The storage mode must be a string
  if (typeof storage.mode !== 'string') {
    throw new Error('The storage mode must be a string');
  }

  // The storage mode must be one of the storage modes
  if (!Object.values(STORAGE_MODES).includes(storage.mode)) {
    throw new Error(`The storage mode must be one of the following: ${Object.values(STORAGE_MODES).join(', ')}`);
  }
}

/**
 * This function validates the authorization configuration, throwing an error if it is invalid
 * @param authorization  The authorization configuration to validate
 * @throws Error
 */
export const validateConfigurationAuthorization = (authorization) => {
  // The authorization mode must be a string
  if (typeof authorization.mode !== 'string') {
    throw new Error('The authorization mode must be a string');
  }

  // The authorization mode must be one of the authorization modes
  if (!Object.values(AUTHORIZATION_MODES).includes(authorization.mode)) {
    throw new Error(`The authorization mode must be one of the following: ${Object.values(AUTHORIZATION_MODES).join(', ')}`);
  }

  // The authorization source must be a string
  if (typeof authorization.source !== 'string') {
    throw new Error('The authorization source must be a string');
  }

  // The authorization source must be one of the authorization sources
  if (!Object.values(ACCESS_CONTROL_LIST_SOURCE).includes(authorization.source)) {
    throw new Error(`The authorization source must be one of the following: ${Object.values(ACCESS_CONTROL_LIST_SOURCE).join(', ')}`);
  }

  // If the source is an api endpoint, the endpoints must be an object and the acl endpoint must be a string
  if (authorization.source === ACCESS_CONTROL_LIST_SOURCE.API) {
    if (typeof authorization.endpoints !== 'object') {
      throw new Error('The authorization endpoints must be an object');
    }

    if (typeof authorization.endpoints.acl !== 'string') {
      throw new Error('The authorization acl endpoint must be a string');
    }
  }

  // The endpoints must be an object
  if (typeof authorization.endpoints !== 'object') {
    throw new Error('The authorization endpoints must be an object');
  }

  // If the acl endpoint is set, it must be a string
  if (authorization.endpoints.acl && typeof authorization.endpoints.acl !== 'string') {
    throw new Error('The authorization acl endpoint must be a string');
  }
}

/**
 * This function validates the configuration, throwing an error if it is invalid
 * @param configuration  The configuration to validate
 * @throws Error
 */
export const validateConfiguration = (configuration) => {
  // Configurations must be an object
  if (typeof configuration !== 'object') {
    throw new Error('The configuration must be an object');
  }

  // The authentication configuration must be an object
  if (typeof configuration.authentication !== 'object') {
    throw new Error('The authentication configuration must be an object');
  }

  if(configuration.authentication.oAuth) {
    validateOAuthConfiguration(configuration);
  }

  // The storage configuration must be an object
  if (typeof configuration.storage !== 'object') {
    throw new Error('The storage configuration must be an object');
  }

  validateConfigurationStorage(configuration.storage);

  // The authorization configuration must be an object
  if (typeof configuration.authorization !== 'object') {
    throw new Error('The authorization configuration must be an object');
  }

  validateConfigurationAuthorization(configuration.authorization);
}



/**
 * This function creates a builder function for the configuration
 * It will have methods for each configuration option
 * @returns {function(): {build: (function(): *)}}
 */
export const getConfigBuilder = () => {
  let configuration = {
    authentication: {
      oAuth: {},
    },
    storage: {},
    authorization: {},
  };

  const builder = () => {
    return {
      build: () => {
        validateConfiguration(configuration);
        return configuration;
      }
    }
  }

  const authenticationBuilder = () => {
    return {
      withAuthentication: (authenticationConfiguration) => {
        configuration.authentication = authenticationConfiguration;
        return builder();
      }
    }
  }

  const oAuthBuilder = () => {
    return {
      withOAuth: (oAuthConfiguration) => {
        oAuthConfiguration = oAuthConfiguration || {};
        configuration.authentication.oAuth = oAuthConfiguration;
        return builder();
      },
      withOAuthClientId: (clientId) => {
        configuration.authentication.oAuth.clientId = clientId;
        return builder();
      },
      withOAuthRedirectUri: (redirectUri) => {
        configuration.authentication.oAuth.redirectUri = redirectUri;
        return builder();
      },
      withOAuthScopes: (scopes) => {
        configuration.authentication.oAuth.scopes = scopes;
        return builder();
      },
      withOAuthHost: (host) => {
        configuration.authentication.oAuth.host = host;
        return builder();
      },
      withOAuthRefreshEndpoint: (refreshEndpoint) => {
        configuration.authentication.oAuth.endpoints.refresh = refreshEndpoint;
        return builder();
      },
      withOAuthLogoutEndpoint: (logoutEndpoint) => {
        configuration.authentication.oAuth.endpoints.logout = logoutEndpoint;
        return builder();
      },
    }
  }

  const storageBuilder = () => {
    return {
      withStorage: (storageConfiguration) => {
        configuration.storage = storageConfiguration;
        return builder();
      },
      withSessionStorage: () => {
        configuration.storage = {
          mode: STORAGE_MODES.SESSION,
        }
        return builder();
      },
      withLocalStorage: () => {
        configuration.storage = {
          mode: STORAGE_MODES.LOCAL,
        }
        return builder();
      },
      withCookieStorage: () => {
        configuration.storage = {
          mode: STORAGE_MODES.COOKIE,
        }
        return builder();
      },
    }
  }

  const authorizationBuilder = () => {
    return {
      withAuthorization: (authorizationConfiguration) => {
        configuration.authorization = authorizationConfiguration;
        return builder();
      },
      withAuthorizationMode: (authorizationMode) => {
        configuration.authorization.mode = authorizationMode;
        return builder();
      },
      withAuthorizationSource: (authorizationSource) => {
        configuration.authorization.source = authorizationSource;
        return builder();
      },
      withAuthorizationEndpoints: (authorizationEndpoints) => {
        configuration.authorization.endpoints = authorizationEndpoints;
        return builder();
      },
      withAuthorizationAclEndpoint: (authorizationAclEndpoint) => {
        configuration.authorization.endpoints.acl = authorizationAclEndpoint;
        return builder();
      },
    }
  }

  return {
    ...builder(),
    ...authenticationBuilder(),
    ...oAuthBuilder(),
    ...storageBuilder(),
    ...authorizationBuilder(),
    withRawConfiguration: (rawConfiguration) => {
      configuration = rawConfiguration;
      return builder();
    }
  }
}

// Test the configuration builder
const configuration = getConfigBuilder()
  .withOAuth()
  .withOAuthClientId('my-client-id')
  .withOAuthRedirectUri('https://my-app.com/oauth/callback')
  .withOAuthScopes(['openid', 'profile', 'email', 'offline_access'])
  .withOAuthHost('my-auth-server.com')
  .withOAuthRefreshEndpoint('/api/oauth/refresh')
  .withOAuthLogoutEndpoint('/api/oauth/logout')
  .withLocalStorage()
  .withAuthorization()
  .withAuthorizationMode(AUTHORIZATION_MODES.ACCESS_CONTROL_LIST)
  .withAuthorizationSource(ACCESS_CONTROL_LIST_SOURCE.API)
  .withAuthorizationAclEndpoint('/api/user/permissions')
  .build();

const rawConfiguration = getConfigBuilder()
  .withRawConfiguration(exampleConfiguration)
  .build();